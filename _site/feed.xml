<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Youngbin Han</title>
    <description>Youngbin Han&#39;s Personal Jekyll Based Blog!</description>
    <link>http://sukso96100.github.io//blog/</link>
    <atom:link href="http://sukso96100.github.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 11 Dec 2015 20:58:08 +0900</pubDate>
    <lastBuildDate>Fri, 11 Dec 2015 20:58:08 +0900</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Ubuntu Server 에 Docker 설치하고 설정하기.</title>
        <description>&lt;p&gt;필자는 AWS EC2 VM에 도커(Docker)를 한번 설치하여, 이것저것 개발한 웹 앱과 서버 등을 돌려보기로 했습니다. 그러면서 포스팅으로도 정리하려 합니다. 먼저, 설치/설정을 대략 했는데, 이 포스트로 그 과정을 정리합니다.&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker??&lt;/h2&gt;

&lt;p&gt;도커(Docker)는, 리눅스 컨테이너 기술을 기반으로, 앱을 배포할 때 필요한 모든 것을 하나의 컨테이너에 담아 OS에 상관없이 앱을 패키징하여 배포할 수 있도록 해 주는 프로그램 입니다. 기존 가상머신을 이용하여 배포를 하는 경우에는, 호스트 OS 위에 가성머신을 올리고, 각 가상머신 마다 게스트 OS와 바이너리 및 라이브러리를 넣어 그 위애 앱 하나씩 올려 배포한다면. 도커의 경우에는, 호스트 OS 위에 바로 도커 엔진이 그 위에 바로 각 앱과 바이너리 및 라이브러리가 포함된 컨테이너가 있는 구조 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/vm-diagram.png&quot; /&gt;&lt;br /&gt;
&amp;gt; VM의 구조
&amp;gt; 출처 : https://www.docker.com/what-docker&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/docker-diagram.png&quot; /&gt;&lt;br /&gt;
&amp;gt; Docker의 구조
&amp;gt; 출처 : https://www.docker.com/what-docker&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;설치해 봅시다.&lt;/h2&gt;
&lt;p&gt;필자는 EC2 인스턴스에 우분투 서버 14.04LTS 를 돌리므로 이를 기준으로 설명 하겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 사용중인 커널 버전이 3.10 이상이고 64bit 커널인지 확인합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;uname -r&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;우분투 12.04LTS의 경우, 커널 버전이 3.13 이상이여야 합니다. 아래 명령어로, 커널을 업그레이드 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get update
sudo apt-get install linux-image-generic-lts-trusty
sudo reboot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;필요한 버전의 커널을 설치 하였다면, 이제 Docker 를 설치 합시다. 설치에 curl 이 필요 하므로, 먼저 curl 이 설치 되어 있는지 확인합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;which curl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;설치 되어 있지 않다면, 설치 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get update
sudo apt-get install curl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;아래 명령으로, 최신 버전의 Docker 를 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -sSL https://get.docker.com/ | sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;설치가 잘 되었는지 확인합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo docker run hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;docker--&quot;&gt;(설정하기) Docker 그룹 만들기.&lt;/h2&gt;
&lt;p&gt;Docker 는 TCP 소켓 대신, 유닉스 소켓에 붙어 있습니다. 기본적으로 이 유닉스 소켓은 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;사용자의 소유이며,
다른 사용자들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;를 사용하여 접근할 수 있습니다. Docker 데몬의 경우는 그래서 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 사용자로 실행됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;명령어 사용시, &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;를 사용하지 않으려면, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; 유닉스 그룹을 만들고, 그 안에 사용자를 추가합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;를 사용가능한 사용자로 로그인 합니다. 예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;라는 사용자로 로그인 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; 그룹을 만들고, 그 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;사용자를 추가 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo usermod -aG docker ubuntu
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; 명령이 실행 되는지 확인합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; docker run hello-world
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;docker----&quot;&gt;(설정하기) 부팅시 Docker 데몬 자동 시작되도록 설정하기.&lt;/h2&gt;

&lt;p&gt;우분투 15.04 이상은, systemd로 서비스를 관리합니다. 아래 명령으로 부팅시 자동시작 되도록 설정합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;docker
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;우분투 14.10 이하는, upstart 로 서비스를 관리하는데, 위의 과정에서 설치중 자동으로 설정되므로, 따로 설정하실 필요가 없습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이번 포스트는 여기까지 입니다. 아래 링크를 참조하시면 좀 더 도움이 될 겁니다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;참고 및 추가자료 링크&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/what-docker&quot;&gt;What is Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/v1.8/installation/ubuntulinux&quot;&gt;Installation on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/11/16/install-and-configure-docker-on-ubuntu.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/11/16/install-and-configure-docker-on-ubuntu.html</guid>
        
        <category>aws</category>
        
        <category>server</category>
        
        <category>docker</category>
        
        <category>ubuntu</category>
        
        <category>linux</category>
        
        <category>tip</category>
        
        <category>tutorial</category>
        
        <category>note</category>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>AWS EC2 인스턴스 생성하기</title>
        <description>&lt;p&gt;&lt;a href=&quot;/blog/2015/10/25/starting-aws-free-teer.html&quot;&gt;AWS 프리티어에 가입하는 내용을 다루는 저번 글에&lt;/a&gt; 이어,
이 글에서는 AWS 에서 제공하는 가상서버에 해당되는 EC2 인스턴스를 프리티어를 통해 제공하는 선을 넘지 않는 한도에서 생성해 보도록 합시다.&lt;/p&gt;

&lt;p&gt;먼저, AWS 콘솔에 로그인 하세요. 본인의 AWS 계정으로 로그인 하면 됩니다. 그럼 아래 사진처럼, AWS 제품들이 나타납니다.
우측 상단에서, 어느 위치의 서버를 사용할 것인지 선택합니다. 저는 싱가포르로 선택 했습니다. 그 다음, “Compute” 부분의 “EC2” 를 선택합니다.
&lt;img src=&quot;/blogimgs/ec2_1.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러면 아래 사진처럼, EC2 자원 상태를 대략적으로 보여주는 페이지가 나옵니다. 여기서, “Launch Instance” 를 클릭하여, 새 인스턴스 생성을 시작합니다.
&lt;img src=&quot;/blogimgs/ec2_2.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스에 설치하여 사용할 OS 를 선택합니다. 본인이 사용하기 편한 것으로 선택 하시면 됩니다. 저는 Ubuntu 를 선호하므로, Ubuntu 14.04 LTS 를 선택했습니다.
&lt;img src=&quot;/blogimgs/ec2_3.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스 타입을 선택합니다. 프리티어의 경우는 t2.micro 까지만 무료로 제공합니다. 더 나은 CPU나 메모리 등이 필요하신 경우, 요금을 추가로 지불 하셔야 합니다.
&lt;img src=&quot;/blogimgs/ec2_4.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스 세부사항 설정 화면입니다. 꼭 필요한 경우에만 수정하고, 아니면 그냥 넘어갑니다.
&lt;img src=&quot;/blogimgs/ec2_5.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;필요하신 경우 스토리지를 추가합니다. 프리티어 사용자들은 최대 30GB 까지 무료로 사용 가능합니다.
&lt;img src=&quot;/blogimgs/ec2_6.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;태그를 달아 인스턴스의 이름 등을 지정합니다.
&lt;img src=&quot;/blogimgs/ec2_7.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;시큐리티 그룹을 설정합니다. 어느 IP 로 부터의 접속을 허용할지, 어느 포트를 열지 등을 설정합니다.
&lt;img src=&quot;/blogimgs/ec2_8.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;설정이 다 되었습니다. 이제 인스턴스를 런치하기 앞서, 본인이 지정한 새로 런치될 인스턴스의 세부사항을 다시한번 확인합니다. 그리고 “Launch” 를 눌러 개속합니다.
&lt;img src=&quot;/blogimgs/ec2_9.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스에 안전하게 접속하기 위해, EC2 접속에는 키 페어가 사용됩니다. 키 페어가 있는 경우, Choose an existiing key pair 를 선택하시고, 바로 아래에서 키 페어를 고릅니다.
&lt;img src=&quot;/blogimgs/ec2_10.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;없는 경우, Create a new key pair 를 선택하고, 키 페어 이름을 입력합니다. 그리고, “Download key pair” 를 눌러 키 페어 파일을 받습니다.
 이 키 페어 파일은 한 번만 받을 수 있으므로, 분실하지 않도록 잘 보관해야 합니다. 키 페어 선택 후 “Launch Instance”를 눌러 인스턴스를 생성합니다.
&lt;img src=&quot;/blogimgs/ec2_11.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다 되었네요, 잠시 기다립니다.
&lt;img src=&quot;/blogimgs/ec2_12.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인스턴스가 런치(생성) 되고 작동중 상태가 되었습니다. 이제 인스턴스에 아파치 웹 서버 등을 올려 웹사이트를 돌리는 등. 원하는 작업을 하실 수 있습니다.
&lt;img src=&quot;/blogimgs/ec2_13.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Nov 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/11/07/creating-aws-ec2-instance.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/11/07/creating-aws-ec2-instance.html</guid>
        
        <category>aws</category>
        
        <category>server</category>
        
        <category>tip</category>
        
        <category>tutorial</category>
        
        <category>note</category>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>AWS 프리티어 가입하기</title>
        <description>&lt;p&gt;최근 Node.js 랑 Docker 한번 사용해서 개인적으로 웹서비스 하나 구현해 보려고 아마존 웹서비스에 가입 했습니다.(지금 본인이 고3 수능 준비하는 사람인건 함정…) 원래는 GitHub에서 주는 학생 해택으로 크레딧을 받아다 디지털 오션을 사용 하려 했는데, 계정 설정 잘못 해서 크레딧을 못쓰계 되었네요. ㅋㅋㅋ 그러다 아마존 웹서비스 보니 1년정도 무료로 써볼 수 있게 하더군요. 그래서 아마존 프리티어 가입 했습니다. 1년 다되서 군대 가기 전에 계정 해지할 생각입니다.&lt;/p&gt;

&lt;p&gt;앞으로 아마존 웹서비스 쓰고 이걸로 이것저것 개발하면서 포스트 남길 예정입니다(?)&lt;/p&gt;

&lt;p&gt;일단 오늘은 가입을 했으니 가입 과정을 포스트로 쓰려고 합니다.&lt;/p&gt;

&lt;p&gt;일단은 아마존 웹서비스 프리티어 하면 뭘 무료로 제공하나 봅시다.
&lt;img src=&quot;/blogimgs/aws1.png&quot; /&gt;&lt;br /&gt;
대략 아래와 같은 사항을 무료로 제공합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(컴퓨팅) Amazon EC2 : 월 750시간, Windows 및 Linux t2.micro 인스턴스&lt;/li&gt;
  &lt;li&gt;(스토리지) Amazon S3 : 5GB&lt;/li&gt;
  &lt;li&gt;(데이터베이스) Amazone RDS : 마이크로 DB 인스턴스, 월 750시간&lt;/li&gt;
  &lt;li&gt;(데이터베이스) Amazone DynamoDB : 25GB 스토리지, 월 최대 2억개 요청&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ko/free/&quot;&gt;그 외에도 다양한 것을 무료로 제공합니다.&lt;/a&gt; 대부분 1년간 무료로 제공합니다.
 일단은  &lt;a href=&quot;https://aws.amazon.com/ko/free/&quot;&gt;여기&lt;/a&gt;로 이동하여, 가입을 합시다. “무료 계정 생성” 을 눌러 계정을 만듭시다.
 &lt;img src=&quot;/blogimgs/aws1.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이메일이나 휴대전화 번호 입력 후, 계정이 없는 경우, “새 사용자 입니다”를 아니면, “기존 사용자이며 비밀번호는 다음과 같습니다.”를 선택하고 비밀번호 입력 후 계속합니다.
&lt;img src=&quot;/blogimgs/aws2.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;돈을 내고 AWS를 쓰든, 무료로 제공되는 프리티어를 쓰든, 일단은 신용카드나 체크카드가 있어야 계속 할 수 있습니다.
프리터어 사용자의 경우, 무료 기간 끝나거나 무료 제공 한도 넘으면 그만큼 요금 부과를 위해 입력이 필요합니다.
VISA 또는 MasterCard 브랟드의 해외 결제가 가능한 신용카드 또는 체크카드 정보를 입력하신 후, 계속합니다.
&lt;img src=&quot;/blogimgs/aws3.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정보를 입력하면, 1달러 결제가 이뤄지는데, 이는 카드가 정상인지 그리고 본인확인을 위한 테스트 결제라고 합니다.
나중에 결제가 취소된다고 합니다.&lt;/p&gt;

&lt;p&gt;전화로 ID 인증을 합니다. 국가 번호를 대한민국(+82) 로 설정하고, 본인 전화번호 입력 후, “지금 전화하기” 를 누릅니다.
본인 전화로 전화가 오면 받고, 화면에 나타난 PIN 번호를 전화 다이얼로 입력하시면 인증이 됩니다.
&lt;img src=&quot;/blogimgs/aws4.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/aws5.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저는 돈이 별로 없고, 고정 수입도 없으므로…(?) 일단 무료를 선택 하겠습니다.
&lt;img src=&quot;/blogimgs/aws6.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;가입이 다 끝났네요. “콘솔에 로그인”을 눌러 로그입 합시다. 이제 아마존 프리티어 해택으로 제공되는 것들을 사용 할 수 있습니다. 이 포스트는 여기에서 마치도록 하겠습니다.
&lt;img src=&quot;/blogimgs/aws7.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고자료&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/free/&quot;&gt;AWS 프리티어&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/pricing/?nc2=h_ql&quot;&gt;AWS 요금&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/free/faqs/&quot;&gt;AWS 프리티어 FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/10/25/starting-aws-free-teer.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/10/25/starting-aws-free-teer.html</guid>
        
        <category>aws</category>
        
        <category>server</category>
        
        <category>tip</category>
        
        <category>tutorial</category>
        
        <category>note</category>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>아치리눅스에서 다솜 입력기 설치 및 설정하여 사용하기</title>
        <description>&lt;p&gt;어제(10.09) 다솜 입력기 정식 버전이 나왔습니다. 그래서 아치 리눅스에서 사용하려고, 제가 패키징 하여 AUR에 올렸습니다.
기존 Fcitx 지우고 다솜 입력기 설치하여 사용했는데, 다른 입력기에 비해 사용하기 편하더군요.
아래 과정을 거쳐서 설치하시고 설정하시면, 사용하실 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;설치하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://aur.archlinux.org/packages/dasom-git/&quot;&gt;dasom-git&lt;/a&gt; 패키지를 AUR 에서 받아 설치합니다.
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Yaourt&quot;&gt;yaourt&lt;/a&gt; 같은 AUR 도구를 사용하세요.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S dasom-git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;libindicator---&quot;&gt;libindicator 빌드 오류 해결하기.&lt;/h3&gt;
&lt;p&gt;다솜 입력기는 libappindicator-gtk3 를 요구하는데, 이 패키지는 libindicator 패키지를 요구합니다.
그런데, libindicator 패키지를 빌드하는 중 아래와 같은 오류가 발생하는 경우가 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/usr/bin/ld: cannot find -lglib-2.0-lm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이러한 오류를 방지하려면, 빌드에 앞서 아래와 같이, PKGBUILD 수정을 원하냐고 물을 때, y를 눌러, PKGBUILD 를 수정해야 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Edit PKGBUILD ? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y/n] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt; to abort&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고, PKGBUILD 에서 build() 부분의 cd 명령어와 ./configure 사이에 다음을 추가합니다.(두 군데 있는데, 두 군데 모두 추가합니다.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sed -i &lt;span class=&quot;s1&quot;&gt;&#39;s/LIBINDICATOR_LIBS+=&quot;$LIBM&quot;/LIBINDICATOR_LIBS+=&quot; $LIBM&quot;/g&#39;&lt;/span&gt; ./configure&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;저장 후, 빌드를 계속하여 설치합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;입력기 설정하기&lt;/h3&gt;
&lt;p&gt;다른 입력기와 설정 방법은 거의 동일합니다.&lt;/p&gt;

&lt;p&gt;먼저, ~/.xprofile 파일을 아래와 같이 수정하여 저장합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dasom
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dasom
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XMODIFIERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@im=dasom&quot;&lt;/span&gt;
dasom-daemon &amp;amp;
dasom-indicator &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고, 그놈 셸을 사용하시는 경우, 아래 명령을 추가로 실행합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gsettings &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;org.gnome.settings-daemon.plugins.keyboard active &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;gsettings &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;org.gnome.settings-daemon.plugins.xsettings overrides &lt;span class=&quot;s2&quot;&gt;&quot;{&#39;Gtk/IMModule&#39;:&amp;lt;&#39;dasom&#39;&amp;gt;}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제, 로그아웃 후 다시 로그인 하시면, 다솜 입력기를 사용하실 수 있습니다,&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;참고자료 &amp;amp; 관련자료&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cogniti/dasom&quot;&gt;다솜 입력기 소스코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aur.archlinux.org/packages/dasom-git/&quot;&gt;다솜 입력기 AUR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Korean_input_%28%ED%95%9C%EA%B5%AD%EC%96%B4%29&quot;&gt;아치 위키 - Korean input (한국어)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aur.archlinux.org/pkgbase/libindicator/&quot;&gt;AUR - libindicator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?id=196069&quot;&gt;Arch Linux Forums - Fcitx not work in Gnome 3.16&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forum.ubuntu-kr.org/viewtopic.php?f=6&amp;amp;t=28301&quot;&gt;우분투 한국 커뮤니티 포럼 - 다솜 입력기 1.0 출시합니다.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Oct 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/10/10/install-and-setup-dasom-im-on-archlinux.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/10/10/install-and-setup-dasom-im-on-archlinux.html</guid>
        
        <category>korean-input</category>
        
        <category>linux</category>
        
        <category>archlinux</category>
        
        <category>dasom-im</category>
        
        
      </item>
    
      <item>
        <title>EnhanceIO 를 이용하여, SSD를 캐싱용으로 사용하기.</title>
        <description>&lt;p&gt;사용중이신 노트북이나 데스크탑에 500GB~1TB 정도 되는 하드디스크와 100GB~200GB정도 되는 SSD를 장착하여 같이 사용 하시나요?
이러한 환경에서 EnhanceIO 를 이용하시면, SSD를 하드디스크 캐싱에 사용하실 수 있습니다.
bcache 를 이용해서도 SSD에 캐싱을 할 수 있지만, 하드디스크와 SSD 모두 포맷하고 bcache 디바이스로 변환해야 SSD 에 캐싱이 가능하다는 번거로움이 있습니다.
반면 EnhanceIO 는 그럴 필요 없이 쉽게 설정하셔서 사용 하실 수 있습니다.
이 포스트에서는 리눅스에서 EnhanceIO 를 설치하고, SSD 캐싱을 설정하는 법을 다룹니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;설치&lt;/h2&gt;
&lt;p&gt;### ArchLinux
enhanceio-dkms-git 패키지를 AUR 에서 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S enhanceio-dkms-git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h3&gt;
&lt;p&gt;ppa:enhanceio/daily PPA를 추가하고, enhanceio 패키지를 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo add-apt-repository ppa:enhanceio/daily
sudo apt-get update
sudo apt-get install enhanceio&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-1&quot;&gt;설정&lt;/h2&gt;
&lt;p&gt;간단합니다. eio_cli를 이용하여, 명령줄 하나만 실행하시면 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo eio_cli create -d &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;마운트된 하드디스크 또는 하드디스크 파티션 경로] -s &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;마운트된 SSD 또는 SSD 파티션 경로] -c my_first_enhanceio&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 04 Sep 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/09/04/using-enhanceio-to-use-ssd-for-cache.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/09/04/using-enhanceio-to-use-ssd-for-cache.html</guid>
        
        <category>enhanceio</category>
        
        <category>linux</category>
        
        <category>tip</category>
        
        <category>tutorial</category>
        
        <category>ssd_caching</category>
        
        <category>archlinux</category>
        
        
      </item>
    
      <item>
        <title>브리츠 BR-3000 Mini 블루투스 스피커 사용 후기</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blogimgs/11873429_983924731659836_6789396665988454229_n.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/11028023_983924754993167_2806264849500715027_n.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/IMG_20150824_194221.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/IMG_20150824_194607.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/Screenshot_2015-08-24-20-23-16.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/SAM_1344.JPG&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오늘 학교 수업 끝나고 폰 받아 켜보니(저희반은 폰을 걷습니다) 웬 택배가 집에 와있다고 문자가 와 있더군요.&lt;br /&gt;
뭔가 했더니. 저번에 숭실대학교 모의전형 후기 쓰고 이벤트 당첨되서 온 상품이였네요.ㅎㅎㅎ&lt;br /&gt;
바로 열어서 써보는 중인데, 크기도 작고 쓰기도 편하네요. 음질은 일단 폰(넥서스5) 내장 스피커보단 좋은 것 같습니다.&lt;br /&gt;
들고다니면서(?) 친구들하고 음악 좀 크게 틀고 들을 떄 유용할듯 하네요. (지금은 고3이라 그러기 어렵다는 함정이 있지만…)&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;숭실대학교 입학처 분들 보내주셔서 감사합니다^^ 잘 쓰도록 하겠습니다.&lt;br /&gt;
입시 준비 철저히 해서, 꼭 숭실대 합격겠습니다!&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/08/24/britz-br-3000-mini-bluetooth-speaker-review.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/08/24/britz-br-3000-mini-bluetooth-speaker-review.html</guid>
        
        <category>review</category>
        
        <category>gadget</category>
        
        <category>ssu</category>
        
        <category>soongsil_university</category>
        
        
      </item>
    
      <item>
        <title>Fish 셸 설치하고, Oh My Fish 로 커스터마이징 하기</title>
        <description>&lt;p&gt;필자는 기본적으로 리눅스 배포판에 있는 bash 를 사용하다가, 전에 한번 zsh 로 갈아탔고.
이번에는, fish 라는 셸로 갈아 탔습니다. 주변 친구 몇명이 쓰길래, 한번 써보려고 설치해 봤더니, zsh 보다 더 편리하고. 커스터마이징 하기도 좋더군요.&lt;/p&gt;

&lt;p&gt;이 포스트에서는 fish 셸을 설치하여 기본 셸로 설정하는 것과, Oh My Fish(Oh My Zsh 에 영감을 받아 만들어 졌다고 하네요.)를 이용해 커스터마이징 하는법을 다룹니다.&lt;/p&gt;

&lt;h3 id=&quot;fish----&quot;&gt;그래서, Fish 는 또 뭐가 좋나요?&lt;/h3&gt;
&lt;p&gt;fishshell.com 의 설명을 인용해 설명합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자동완성 : 지금까지 제가 써온 셸(그래봤자 bash, zsh 뿐이지만…) 중에 가장 강력합니다. 사용한 명령줄 기록에 기반하여, 실행할 명령을 자동으로 추천해줍니다.&lt;/li&gt;
  &lt;li&gt;쉽고 편리한 스크립팅&lt;/li&gt;
  &lt;li&gt;Man Page  자동생성&lt;/li&gt;
  &lt;li&gt;터미널에서 다양한 색상을 볼 수 있습니다.&lt;/li&gt;
  &lt;li&gt;웹 기반 설정 : GUI 사용 가능한 경우, 웹에서 fish 를 설정하실 수 있습니다.&lt;/li&gt;
  &lt;li&gt;구문 강조&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fish-----1&quot;&gt;Fish 설치하고, 기본 셸로 설정하기.&lt;/h3&gt;
&lt;p&gt;별로 어렵지 않습니다. 배포판에 내장된 패키지 관리자로 설치하고, 명령줄 하나 실행해서 기본 셸로 설정하시면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h4&gt;
&lt;p&gt;PPA 에서 패키지를 받아 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-add-repository ppa:fish-shell/release-2
sudo apt-get update
sudo apt-get install fish&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;centos-debian-fedora-opensuse-rhel&quot;&gt;CentOS, Debian, Fedora, openSUSE, RHEL&lt;/h4&gt;

&lt;p&gt;다음 웹페이지를 방문하여, 본인의 배포판에 해당되는 것을 클릭하면 나오는 안내를 따라서 설치하세요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://software.opensuse.org/download.html?project=shells%3Afish%3Arelease%3A2&amp;amp;package=fish&quot;&gt;Install package shells:fish:release:2 / fish&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;arch-linux&quot;&gt;Arch Linux&lt;/h4&gt;
&lt;p&gt;pacamn을 이용해 ArchLinux 공식 저장소에서 받아 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pacman -S fish&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;gentoo-linux&quot;&gt;Gentoo linux&lt;/h4&gt;
&lt;p&gt;내장된 패키지 관리자를 이용하여 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;su -
emerge fish&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;section&quot;&gt;기본 셸로 설정하기&lt;/h4&gt;
&lt;p&gt;다음 명령을 실행합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chsh -s /usr/bin/fish&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제, 터미널을 다시 켜서 fish 셸이 나오는지 확인합니다. 나오지 않는다면, 로그아웃 후 다시 로그인 합니다.&lt;/p&gt;

&lt;h3 id=&quot;oh-my-fish---&quot;&gt;Oh My Fish 로 커스터마이징 하기&lt;/h3&gt;

&lt;p&gt;설치는 명령줄 하나면 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/tools/install.fish | fish&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제 테마와 플러그인을 설치해 봅시다.
저는 ‘theme’ 플러그인과 ‘agnoster’ 테마를 설치할 겁니다. 그러기 위해서, 설정파일인, “~/.config/fish/config.fish”
를 열어줍시다.&lt;br /&gt; 평소 사용하시는 텍스트 에디터로 열어주세요. 가장 하단에 다음을 추가해 줍시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Theme &lt;span class=&quot;s1&quot;&gt;&#39;agnoster&#39;&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;&#39;theme&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;저장 후, 터미널을 열고 다음 명령을 실행합니다. 우리가 조금 전에 설정 파일에 명시한 플러그인과 테마를 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;omf install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;테마를 변경해 봅시다. 우리가 설치한, ‘theme’ 플러그인으로 쉽게 변경이 가능합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 설치된 테마 목록 보기&lt;/span&gt;
theme -l
&lt;span class=&quot;c&quot;&gt;# agnoster 테마 적용하기&lt;/span&gt;
theme agnoster&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;더 많은 테마와 플러그인은 &lt;a href=&quot;https://github.com/oh-my-fish?page=1&quot;&gt;여기&lt;/a&gt; 에서 찾으실 수 있습니다.
 설정 파일에 사용할 테마나 플러그인을&lt;code class=&quot;highlighter-rouge&quot;&gt;Theme &#39;테마이름&#39; Plugin &#39;플러그인 이름&#39;&lt;/code&gt;형식으로 정의하시면 됩니다.&lt;/p&gt;

&lt;p&gt;여기까지 작성하도록 하겠습니다. 자세한 사항은 아래 링크들을 참조하시면 좋을 것 같습니다.
&lt;img src=&quot;/blogimgs/awesome-fish.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fishshell.com/docs/current/&quot;&gt;fish shell 문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oh-my-fish/oh-my-fish&quot;&gt;Oh My Fish - GitHub 저장소&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oh-my-fish&quot;&gt;Oh My Fish - 플러그인 및 테마&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oh-my-fish/oh-my-fish/wiki&quot;&gt;Oh My Fish Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/07/30/install-fish-then-customize-it-with-oh-my-fish.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/07/30/install-fish-then-customize-it-with-oh-my-fish.html</guid>
        
        <category>fish_shell</category>
        
        <category>oh_my_fish</category>
        
        <category>update</category>
        
        <category>tips</category>
        
        <category>tutorial</category>
        
        <category>shell</category>
        
        <category>linux</category>
        
        <category>ubuntu</category>
        
        <category>archlinux</category>
        
        <category>fedora</category>
        
        
      </item>
    
      <item>
        <title>숭실대학교 모의전형 체험(SSU 미래인재 Week) 참가 후기</title>
        <description>&lt;p&gt;오늘(2015.07.28) 숭실대학교 모의전형 프로그램에 참여하고 후기를 작성하게 되었습니다.&lt;br /&gt;
이전에두 2~3회 정도 교내에 대학 윕학사정관 분들께서 오셔서 하시거나,&lt;br /&gt;
수험생이 직접 대학에 가서 하는 모의 면접을 2~3회 정도 해 보았지만, &lt;br /&gt;
아무래도 오늘 참가했었던 숭실대학교 모의전형이 제일 도움이 되지 않았나 싶습니다.&lt;/p&gt;

&lt;p&gt;숭실대는 제가 제일 진학하고 싶은 대학교 이기도 합니다, 때문에 더 많은 도움이 되었습니다.&lt;br /&gt;
일단은 모의전형에 앞서 자기소개서를 제출하고 그것으로 심사를 하여 참여자를 뽑습니다.&lt;br /&gt;
시험기간 중 신청이 이뤄 졌었는데, 그러다 보니 새벽에 첨석받고 수정 하느라 평소보다 더 늦게 잔것 같네요.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;운이 좋아, 참가자로 뽑혀 참여하고 왔습니다. 오전 10시쯤부터 오후 5시쯤 까지 종일 일정이 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/ssuweek0.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/ssuweek1.jpg&quot; /&gt;&lt;br /&gt;
숭실대학교 캠퍼스는 멋지지만, 언덕에 있어 어쩔 수 없이 계단이 많네요…&lt;/p&gt;

&lt;p&gt;약 20~30 분정도 일찍 도착했는데, 이미 도착한 사람들도 상당히 많았습니다.&lt;br /&gt;
이름표와, 수시 및 정시 모집 안내 책자 등이 담긴 종이가방을 받아 자리에 않았습니다.
&lt;img src=&quot;/blogimgs/ssuweek2.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/ssuweek3.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/ssuweek4.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/ssuweek5.jpg&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;시간이 되자 본격적으로 프로그램이 시작 되었습니다. 소프트웨어학과로 지원했던 저는 8조가 되어 B팀(5~10조) 와 일정을 함께했습니다. 오전에 면접 특강을 먼저 들었습니다.&lt;br /&gt;
면접 특강은, 제가 이전에 모의 면접을 하면서 놓친 것들을 확인하고, 면접을 할 때 알아야 할 것을 배울 수 있는 좋은 특강이였습니다.&lt;br /&gt;
주로 면접할 때의 자세, 대답하는 방법(말의 높낮이, 빠르기, 적절한 답변의 길이 등), 면접 준비하는 법, 면접할 때의 좋치 않은 습관 고치는 법 등에 대해서 들었습니다.&lt;br /&gt;
일부 내용은 살짝 국어시간 수업에 나올법한 내용이기도 했습니다(?) 50분동안 자세하고 다양한 면접할때(또는 준비할 때) 주의할 점 이나 팁 등을 알려주셨습니다.
&lt;img src=&quot;/blogimgs/ssuweek6.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/ssuweek7.jpg&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;면접 특강이 끝나고, 바로 점심 식사를 하면서 저희 조 멘토를 맡으신 선배와 이야기도 조금씩 하였습니다.&lt;br /&gt;
막상 멘토 맡으신 선배가 질문을 하라고 하시니, 전 어떤 질문을 할지 잘 몰라, 질문을 거의 하지 않은 것 같네요…&lt;br /&gt;
점심 식사를 하면서 숭실대 학식을 처음 먹어 봤는데, 저의 경우에는 입맛에도 잘 맞고, 맛있었습니다.&lt;br /&gt;
&lt;img src=&quot;/blogimgs/ssuweek8.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blogimgs/ssuweek9.jpg&quot; /&gt;&lt;br /&gt;
식사 후 캠퍼스 투어를 했습니다. 입학처에서 후식으로 에이드(레몬/오렌지/자몽/블루베리) 도 제공해서, 마시면서 더위를 조금씩 식히며 투어를 할 수 있었습니다.
&lt;img src=&quot;/blogimgs/ssuweek10.jpg&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;숭실대 곳곳을 저희조 멘토 맡으신 정석민 선배님께서 캠퍼스 안을 잘 안내해 주셨습니다. 캠퍼스를 돌면서, 각 건물들이 쓰이는 용도나, 기념물도 소개해 주셨습니다.&lt;br /&gt;
학생회관, 진리관, 조만식 기념관, 웨스트민스터 홀 등 다양한 숭실대학교 건물 내부를 둘러볼 수 있었습니다. 고등학교 생활을 하면서, 대학 캠퍼스를 둘러볼 일은 거의 없을텐데,&lt;br /&gt;
좋은 기회 였던것 같습니다.
&lt;img src=&quot;/blogimgs/ssuweek11.jpg&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오후에는 종일 면접을 하고(대부분 면접 대기시간…), 면접 번호가 8번이다 보니, 긴 시간동안 하루종일 떨면서 면접을 기다렸었습니다.&lt;br /&gt;
멘토 맡으션던 선배님께서 많이 결려해 주셔서, 긴장감을 좀 낮추고 면접에 임할 수 있었습니다.&lt;br /&gt;
면접과 자기소개서에 대해 피드백을 받았습니다. 면접을 해 보는것도 도움이 되었지만, 면접과 자기소개서에 대한 피드백이 가장 많이 도움이 되었습니다.&lt;br /&gt;
피드백은 면접이 모두 끝나고, 일괄적으로 이뤄 졌습니다. 먼저 공통적인 문제점에 대하여 피드백을 하고,&lt;br /&gt;
그 다음에 개별적인 부분에 대해 순서대로 꼼꼼히 문제점을 짚어 주시면서, 어떻게 고치면 되는지도 말씀해 주셨습니다.&lt;br /&gt;
저의 경우는, 자소서 3~4번 문항에 대한 피드백과, 면접 질문 길이를 짧게 하라는 피드백, 면접 할때 자세에 대한 피드백을 받았습니다.&lt;br /&gt;
피드백을 받으면서, 짧은 여름방학동안 시간 분배를 잘 해서 대입 준비를 철저히 해야 겠다는 생각이 들었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/ssuweek12.jpg&quot; /&gt;&lt;br /&gt;
모의 면접과 피드백을 끝으로 일정이 모두 마무리 되었습니다. 이런 행사에 참여할수 있어 정말 좋았고,&lt;br /&gt;
또한 영광이였습니다.(특히 숭실대학교 캠퍼스에 하루종일 있을 수 있었다는 것이…).&lt;br /&gt;
오늘같은 행사를 열어 저에게 좋은 기회를 제공해 주신 숭실대학교 입학처 분들께 감사 드립니다^^&lt;br /&gt;
학생부 종합전형을 주로 준비하던 저에게 정말 좋은 기회었습니다. 학생부 종합전형으로 대학 지원을 고려 하시는 분들께 많은 도움이 되는 행사라고 생각합니다.&lt;br /&gt;
매년 계속 열리고 있으니 지금 고등학교 1~2 학년인 분들 내년에 참여하시면 얻어가는 걷이 많을 거라고 생각합니다. 한번 참여해 보시길.&lt;/p&gt;

&lt;p&gt;그리고 오늘 참여했던 친구들 그리고 저 올해 수시에서 숭실대학교 지원하는 경우 다들 꼭 붙어서, 내년에 숭실대학교에서 다시 보면 정말 좋을 것 같습니다.
&lt;img src=&quot;/blogimgs/ssuweek13.jpg&quot; /&gt;&lt;br /&gt;
(사진 출처 : 숭실대학교 입학사정센터 페이스북 https://www.facebook.com/699297870186858/photos/a.699458830170762.1073741828.699297870186858/759013844215260/?type=1&amp;amp;theater)&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/07/28/ssu-future-human-resources-week-review.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/07/28/ssu-future-human-resources-week-review.html</guid>
        
        <category>interview</category>
        
        <category>review</category>
        
        <category>ssu</category>
        
        <category>soongsil_university</category>
        
        <category>note</category>
        
        <category>university_enterance</category>
        
        
      </item>
    
      <item>
        <title>라즈베리파이에 Node.js 설치하기</title>
        <description>&lt;p&gt;라즈베리파이에 Node.js 를 설치해 봅시다. Node.js 로 작성한 앱을 실행하려면 필요하니, 설치해 봅시다.&lt;/p&gt;

&lt;p&gt;직접 컴파일 하여 설치 하는 법과, 미리 빌드된 패키지를 사용하여 설치하는 법이 있습니다.
이 포스트에서는 두 방법 모두 다 다룰겁니다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;컴파일하여 설치하기&lt;/h3&gt;
&lt;p&gt;방법은 쉬우나, 시간이 너무 오래 걸립니다. 필자는 권장하고 싶지 않은 방법입니다.&lt;/p&gt;

&lt;p&gt;시작하기 앞서, 아래 프로그램들이 설치 되었는지 확인하시고, 설치 안된 것들은 모두 설치하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GCC 4.2 이상&lt;/li&gt;
  &lt;li&gt;G++ 4.2 이상&lt;/li&gt;
  &lt;li&gt;Python 2.6 또는 2.7&lt;/li&gt;
  &lt;li&gt;GNU Make 3.81 이상&lt;/li&gt;
  &lt;li&gt;libexecinfo (FreeBSD 와 OpenBSD 사용시만)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 아래 명령을 순차적으로 실행하여, 소스코드를 받고, 컴파일하여, 설치합니다.
컴파일 시간이 매우 오래 걸리니(사양이 낮은 라즈베리파이에서 빌드하므로…), 차 한잔 하시거나 한숨 주무시고 오시는 것이 좋습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://nodejs.org/dist/v0.12.7/node-v0.12.7.tar.gz
tar xvzf node-v0.12.7.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;node-v0.12.7
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;미리 빌드된 패키지로 설치하기&lt;/h3&gt;

&lt;p&gt;Nathaniel Johnson 이 빌드해 둔 패키지를 다운로드하여 설치합니다.
미리 빌드된 것을 설치하기에, 금방 설치가 가능합니다.(적어도 직접 컴파일 할 때 보다 훨씬 빨리…)&lt;/p&gt;

&lt;p&gt;아래 명령들을 순서대로 실행하여, 패키지를 받고 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://node-arm.herokuapp.com/node_latest_armhf.deb
sudo dpkg -i node_latest_armhf.deb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;설치 잘 되었나 확인하기.&lt;/h3&gt;
&lt;p&gt;설치 후, Node.js 와 Npm 버전 띄우는 명령으로 설치가 잘 되었는지 확인해 보세요.
참고로 최근 버전의 Node.js 는 설치시 Npm 도 같이 설치 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;node -v
npm -v&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 16 Jul 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/07/16/install-nodejs-on-raspberry-pi.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/07/16/install-nodejs-on-raspberry-pi.html</guid>
        
        <category>raspberry-pi</category>
        
        <category>linux</category>
        
        <category>tutorial</category>
        
        <category>tips</category>
        
        <category>nodejs</category>
        
        
      </item>
    
      <item>
        <title>라즈베리파이 모델B+ 릴레이 모듈 테스트.</title>
        <description>&lt;p&gt;최근 가지고 있던 라즈베리파이에, 릴레이 모듈을 연결해서 뭐 하나 만들어 보는 중 입니다.
라즈베리파이와 릴레이 모듈을 연결하여, 방에 있는 가전제품 전원은 제어해 보려구요.&lt;/p&gt;

&lt;p&gt;이미 소프트웨어 파트는 거의 다 되었습니다. 라즈베리파이에서 잘 돌아가나 확인하고 고치기만 하면 됩니다.
뒷북이긴 하지만, 모듈 연결해서 테스트 한것부터 시작해서 이것저것 포스팅 하려 합니다.&lt;/p&gt;

&lt;p&gt;일단 이 포스트에서 릴레이 모듈 연결해서 테스트 하는 것 먼저 다루도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 부품을 구입해야 겠죠? 전 이미 가지고 있던 라즈베리파이1 모델 B+ 랑 8채널 릴레이 모듈을 하나 구입했습니다.
전 &lt;a href=&quot;http://toolparts.co.kr/front/php/product.php?product_no=45658&amp;amp;main_cate_no=&amp;amp;display_group=&quot;&gt;한진데이타의 릴레이 모듈&lt;/a&gt;을 구매했습니다. 전 구입시 점퍼 케이블도 같이 구입했습니다.&lt;/p&gt;

&lt;p&gt;아래 그림을 참고해서 릴레이 모듈을 점퍼 케이블을 이용해 연결해 봅시다.
그림에는 파이와 릴레이 사이 연결할 부분만 표시해 두었습니다.
&lt;img src=&quot;/blogimgs/connect_relay_to_rpi_with_jumper.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;연결 하셨스면. 이제 테스트를 한번 해 봅시다.
아래 Python 스크립트로 테스트 해 봅시다. 단순히 릴레이 모듈 각 체널 스위치 켜고 끄는 스크립트 입니다.
소스코드는 Raspbian 에서 실행됨을 가정하고 작성하였습니다. Raspbian 사용 중이시라면 실행시 문제가 없을 겁니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GPIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ready?&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Setting GPIO Mode as BCM&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Setting Up GPIO from 2 to 9&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Testing Relay Module Control with GPIO&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GPIO &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d is True&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GPIO &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d is False&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done Testing. Cleaning Up GPIO&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;소스코드를 Python 파일(.py)로 저장하고. 아래 명령으로 실행해 봅시다.
예를들어 파일명이 relay.py 면, 다음과 같은 명령으로 실행합니다.
참고로 GPIO 사용시 루트 권한이 필요하므로. 앞에 sudo 를 붙여 실행합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;잘 작동하나요? 아래 영상처럼 작동한다면, 잘 작동하는 겁니다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/TvI9tKXkbiQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;여기까지 릴레이 모듈 테스트 였습니다. 다음 포스트에서 나머지 내용들을 다루겠습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/07/14/raspberry-pi-relay-module-test.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/07/14/raspberry-pi-relay-module-test.html</guid>
        
        <category>raspberry-pi</category>
        
        <category>linux</category>
        
        <category>tutorial</category>
        
        <category>tips</category>
        
        
      </item>
    
      <item>
        <title>라즈베리파이 모델B+ 에 아치리눅스ARM 설치하기.</title>
        <description>&lt;p&gt;필자는 원래 라즈베라파이에 모델 B+에 Raspbian (라즈베리파이를 위해 만들어진 버전의 Debian GNU/Linux)를 설치하여 사용해 왔습니다. 
지금까지는 별 불편함이 없었으나, 이번에 Node.js 로 작성한 것을 테스트 하려다 보니 패키지 문제 때문에 제대로 테스트 하지 못했습니다.
nodejs, npm 패키지 모두 있었지만, 설치해도 제대로 작동하지 않는 듯 했다. npm 은 생각처럼 잘 작동하지도 않았습니다.&lt;/p&gt;

&lt;p&gt;그러던 중, 아치리눅스ARM 을 발견했는데, 아치 리눅스 답게 패키지도 많고, 최신버전이더군요.
당장 아치 리눅스로 갈아타기로 했습니다.&lt;/p&gt;

&lt;p&gt;그 방법을 이 글에서 소개하고자 합니다. 참고로 이 글에서는 라즈베리파이 2 가 아닌
기존버전의 라즈베라파이 모델 B+ 에 설치하는 법을 다룹니다.(제가 가진것이 모델 B+라… ㅎㅎㅎ)&lt;/p&gt;

&lt;p&gt;먼저 리눅스 베포판이 설치된 컴퓨터(또는 노트북) 과 sd 카드를 컴퓨터와 연결할 도구를 준비하시고.
컴퓨터에 sd 카드를 연결합니다.&lt;/p&gt;

&lt;p&gt;터미널을 열고, 루트 계정으로 전환합시다. 대부분의 명령을 실행할 때, 루트권한이 필요해서 그렇습니다.
앞에 sudo 를 붙이는 것도 좋치만, 루트로 전환하는 것이 편할 수도 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo su&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;fdisk 를 이용하여 파티션 작업을 합니다. sd카드가 마운트 된 위치를 확인하신 후,
fdisk 를 실행합니다. 저의 경우에는 sd카드가 /dev/sdb 에 마운트 되어 있어, 다음과 같은 명령을 실행했습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;fdisk /dev/sdb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제 다음 사항을 그대로 따라하세요!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;o 를 입력하여 파티견 테이블을 생성합니다.&lt;/li&gt;
  &lt;li&gt;p를 입력하여, 파티션을 확인합니다. 목록에 파티션이 없어야 합니다.&lt;/li&gt;
  &lt;li&gt;파티션을 만듭시다. n 을 입력하세요, 그리고 p 를 입력하여 주 파티션으로 지정합니다. 
1 을 입력하여 첫번째 파티션으로 지정합니다. Enter 키를 눌러 first sector 사이즈는 기본값을 사용합시다. 
100MiB 보다 큰 용량의 숫자를 입력(Byte 단위로)하여 last sector 사이즈를 정합니다.&lt;/li&gt;
  &lt;li&gt;t 입력 후, c 를 입력하여 첫번째 파티션 타입을 W95 FAT32 (LBA) 로 지정합니다.&lt;/li&gt;
  &lt;li&gt;n, p, 2, Enter 키 2번 을 입력하셔서 두번쨰 파티션을 만듭니다.&lt;/li&gt;
  &lt;li&gt;w 를 입력하여 파티션 설정을 적용하고 fdisk 에서 빠져 나옵니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번에는 파일 시스템을 만들어 줍시다. 먼저 아래 명령줄들을 실행하여, fat 파일 시스템을 만들고 마운트 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkfs.vfat /dev/sdb1
mkdir boot
mount /dev/sdb1 boot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다음으로, ext4 파일 시스템을 만들고 마운트 합니다. 아래 명령줄들을 실행하세요.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkfs.ext4 /dev/sdb2
mkdir root
mount /dev/sdb2 root&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;루트 파일시스템을 다운로드 받아 sdb2 를 마운트한 root 폴더에 압축을 풀어줍시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://archlinuxarm.org/os/ArchLinuxARM-rpi-latest.tar.gz
bsdtar -xpf ArchLinuxARM-rpi-latest.tar.gz -C root
sync&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;boot 파일들을 첫번째 파티션을 마운트한 boot 폴더로 옮깁니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mv root/boot/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; boot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;설치가 끝났습니다. 이제 마운트를 해제하세요.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;umount boot root&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;만들어둔 폴더들과 다운받은 파일은 불필요 하신 경우 지줘줍시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rm -rf boot
rm -rf root
rm ArchLinuxARM-rpi-latest.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다 되었습니다. 이제 sd카드를 라즈베리파이에 삽입하시고, 부팅하셔서 사용하세요!
ssh나 시리얼로 연결하실 수 있습니다. 기본으로 있는 계정은 root 이며, 기본 비밀번호도 root 입니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jul 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/07/11/install-archlinuxarm-on-raspberrypi.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/07/11/install-archlinuxarm-on-raspberrypi.html</guid>
        
        <category>raspberry-pi</category>
        
        <category>linux</category>
        
        <category>tutorial</category>
        
        <category>tips</category>
        
        <category>archlinux</category>
        
        
      </item>
    
      <item>
        <title>무료 무제한 백업이 가능한 구글 포토, 꼭 좋은 것만은 아니다.</title>
        <description>&lt;p&gt;지난 5월 28일 일 년에 한번 구글에서 개최하는 개발자 컨퍼런스인 구글 I/O 가 있었다. 우리가 쓰는 스마트폰에 들어가는 OS 인 안드로이드를 포함 다양한 구글 서비스나, 개발자 또는 사용자들을 위한 새로운 소프트웨어나 서비스 또는 기존의 것들의 개선 사항 등이 이 행사에서 발표된다. 올해 구글 I/O 에서도 올해 말 정식버전이 공개될 새로운 안드로이드 M 버전의 개발자 프리뷰, 사물인터넷 운영체제인 브릴로 등을 포함하여 다양한 것들이 발표되었다. 그중 가장 흥미로웠던 것은 구글 포토가 아닐까 싶다. I/O에서 발표된 다른 것들과 달리 인터넷만 있으면 당장 써볼 수 있는 것이기도 하다. 흔히 구글의 모토가 “악해지지 말자” 라고 알려져 있는데, 구글 포토를 보면 이 모토가 맞는 것 같기도 하지만, 아닌 것 같기도 하다.&lt;/p&gt;

&lt;p&gt;이번에 출시된 구글 포토는 사진을 온라인에 백업해 두고 공유할 수 있는 클라우드 서비스 이다. 기존에 구글의 SNS 인 구글 포토에 묶여 있던 서비스 였지만, 이번에 따로 떨어져 나와 별도의 서비스가 되었다. 안드로이드나 iOS 기기에서는 앱을 설치하고, 설정만 하면 자동으로 사진들을 백업하고 동기화 할 수 있다. 또한 기존 구글 플러스에 묶여 있을떄 무료 백업 용량이 15GB 였던것과 달리, 무제한으로 사진을 백업해 둘 수 있게 되었다. 사진은 1600만 화소, 동영상은 1080p 해상도의 영상까지만 그대로 백업되고, 이보다 화질이나 해상도가 좋은 것들은 품질이 조금 축소되어 백업되긴 하지만. 이 조건이면 우리가 스마트폰으로 찍는 대부분의 사진들은 손실 없이 그대로 백업 가능한 조건이다. 많은 이들이 구글 포토에서 꼽은 장점들 중 하나이다. 또한 사진을 많이 촬영하는 사람들에게도 좋은 점으로 작용하는 부분이다. 다만, DSLR 등을 이용해 촬영한 고해상도의 사진들은 이 조건을 넘어가는 경우가 많을 것이다. 이러한 사진들은 압축되어 저장 되기에, 고해상도 사진들을 원본 그대로 저장하고자 하는 사람들에게는 장접으로 작용하지 않을 것이다. 백업된 사진들은 URL로 쉽게 공유가 가능하다. 공유 받는 사람은 별도의 앱 설치 없이 사진을 공유 받을 수 있다.&lt;/p&gt;

&lt;p&gt;무제한으로 사진 백업이 가능한 것도 좋은 점이지만, 구글 포토가 사전 정리를 쉽게 할 수 있도록 도와주는 것도 좋은 점이다. 구글은 기계학습 기술을 접목하여, 사용자들이 사진을 더 쉽게 정리하고 찾을 수 있도록 하였다.기계학습은 컴퓨터가 데이트를 통해 스스로 학습을 하여 이를 기반으로 특정 상황이나 대상을 인식할 수 있게 하는 기술이다. 마치 사람처럼 말이다. 몇가지 예를 들어보자. 1주일 동안 특정한 곳에 여행을 다녀 왔다고 해보자, 그곳에서 사진을 많이 촬영할 것이다. 이것들이 구글 포토로 백업되면, 단순 백업으로 끝나지 않는다. 일단 자동으로 하나의 앨범으로 정리를 해준다. 사진 중에서 뭔가 같은 장소에서 촬영한 사진은 좌우로 이어붙여서 파노라마로 만들어 지기도 하고. 어떤 사진에는 필터, 효과나 보정을 넣어 주기도 한다. 사진들을 모아서 영상으로 만들어 주거나 동영상처럼 움직이는 GIF 이미지를 만들어 주기도 한다. 한술 더 떠서, 특정 사물이, 장소, 상황별로 사람얼굴에 따라 사람별로 정리 해 주기도 한다. 예를 들어 구글 포토에서 “비행기” 라는 키워드로 검색하면 백업해둔 사진 중 비행기와 연관된 사진들만 나온다. 마찬가지로 “산” 을 검색하면 산 사진만, “서울” 을 검색하면 서울 사진만 나온다. 파일 이름에 해당 키워드가 없는데도 말이다. 사용자들은 그냥 설정만 해두면 자동으로 동기화되어 정리까지 되니, 편리하지 않을 수가 없다.&lt;/p&gt;

&lt;p&gt;장점만 있는것은 아니다. 단점과 우려되는 점 또한 존재한다. 구글 포토는 일개의 클라우드 서비스 이다. 구글 포토로 사진을 백업하는건 당연히 구글의 서버에 사진을 백업해 두는 것이다. 개인의 저장장치가 아닌 구글의 서버에 백업이 되기에 우려해야 할 것이 있다. 백업된 사질이 유출 될 수도 있다는 것이다. 구글의 보안은 매우 철저하다고 알려져 있다. 그러나 이전에 미국 NSA 에서 구글 데이터 센터에서 데이터를 빼낸 사례를 보았을때, 구글의 보안이 아무리 철저하다고 해도, 개인의 사진이 구글의 서버에 있는 이상, 안전하게 유출 문제 없이 보관된다고 단정 지을수 없다. 백업하는 사진 중에 다른 사람이 보아선 안될 민감한 사진이 있다면, 차라리 구글 포토같은 클라우드 서비스를 이용하기 보다 개인의 저장장치에 보관하는것이 더 좋은 선택일 수도 있다.&lt;/p&gt;

&lt;p&gt;구글 포토에 백업된 사진들을 구글이 활용한다면? 구글은 사용자들이 생산하는 컨텐츠들을 이용하여 새로운 기술을 개발해 낸다. 구글 포토의 기계학습에 기반한 사진 정리 및 찾기 기능 또한 이전에 사용자들이 업로드한 사진들을 기반으로 만들어 졌을 것이다. 구글에서 기계학습 알고리즘의 일종인 딥 러닝을 연구 중이라고 하는데, 이에는 방대한 양의 데이터가 필요하다. 필요한 양의 데이터들을 구글 포토 등을 이용하여 확보할 수 있을 것이다. 확보한 데이터를 활용하여 사용자들에게 더 좋은 것을 만들어 제공한다면, 사용자들에게나 구글 에게나 좋은 방향으로 작용할 것이다. 업로드된 사진들로 구글이 수익을 내려고 한다면 어떨까? 구글이 사용자들이 지메일로 주고받은 이메일들을 활용하여 맞춤형 광고를 만들어 사용자에게 노출하고 수익을 낸왔던 것 처럼, 사용자들이 백업한 사진들 또한 맞춤형 광고를 만드는 데 활용할 가능성이 높다. 예를 들어 사용자가 게이밍에 관심이 많아 게임기나 게임 패키지 등의 사진을 많이 찍었다고 하자, 그러면 구글은 이를 보고 게임기 광고나 새로 출시된 게임의 광고를 보여줄 수 있다. 음식 사진이 많다면 이를 보고 유명 맛집의 광고를 보여 줄 수도 있을 것이다.&lt;/p&gt;

&lt;p&gt;구글 포토는 개인이 일상속에서나 여행 등을 하면서 찍은 사진을 백업하여 공유하거나 정리해 두기에는 좋은 서비스이다. 그러나 구글 포토 또한 클라우드 서비스들 중 하나이기에, 백업 할 사진이 언젠가는 유출이 될 수도 있다는 점과, 업로드한 사진들을 구글이 활용할 수도 있다는 점을 알아야 한다.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jul 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/07/10/good-and-bad-side-of-google-photo.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/07/10/good-and-bad-side-of-google-photo.html</guid>
        
        <category>essay</category>
        
        <category>note</category>
        
        <category>web</category>
        
        <category>google</category>
        
        <category>review</category>
        
        
      </item>
    
      <item>
        <title>ResumUtil : 첨삭하기 화면이 편집 화면과 병합되었습니다.</title>
        <description>&lt;p&gt;어제(2015.05.24) 자로 ResumeUtil 인터페이스가 나름(?) 많은 부분이 개선되어 업데이트 되었습니다.&lt;br /&gt;
이 포스트로 달라진 사항을 정리해 알려드리고자 합니다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;페이지 병합&lt;/h3&gt;

&lt;p&gt;기존에 따로 있던 펌삭하기 화면과 양식 편집 화면이 하나로 병합되었습니다.&lt;br /&gt;
앞으로는 편집 화면에서 본인 양식 수정을 하시거나, 다른 사람의 양식 첨삭 둘 다 하시면 됩니다.&lt;br /&gt;
다른 사람의 양식을 볼 때는 양식 편집 기능이 잠깁니다. 그러므로 다른사람 양식을 보는 경우에는, 양식을 읽거나 첨삭만 가능하게 됩니다.
&lt;img src=&quot;/blogimgs/resumeutil_merged.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;불러오기 화면 추가&lt;/h3&gt;

&lt;p&gt;두 페이지가 병합됨에 따라 추가된 화면입니다.&lt;br /&gt;
기존에 첨삭하기 화면에서 다른 사람 양식을 불러오는 것 보다 좀 더 편리하게 다른 사람 양식이나 본인의 양식을 불러오실 수 있습니다.&lt;br /&gt;
(최근 열어본 양식 목록을 보는 기능은 아직 준비되지 않았습니다. 준비 끝나면 업데이트 할 예정입니다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/resumeutil_loadform.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 May 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/05/25/resumeutil-merging-review-page-with-index-page.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/05/25/resumeutil-merging-review-page-with-index-page.html</guid>
        
        <category>update</category>
        
        <category>resumeutil</category>
        
        <category>web</category>
        
        <category>app</category>
        
        <category>university_enterance</category>
        
        <category>introworkout</category>
        
        
      </item>
    
      <item>
        <title>zsh 와 oh my zsh 를 이용해 셸 꾸미기(대신 bash 버리기)</title>
        <description>&lt;p&gt;보통 우리가 리눅스나 맥에서 터미널을 사용할 때 사용하게 되는 명령줄은 셸 bash 입니다.&lt;br /&gt;
이 게시물에서는 기존에 우리가 쓰던 bash 대신 zsh 를 설치하고, zsh 에 대한 간단한 설명과 꾸미는 방법을 간단히 다뤄보고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;bash-zsh&quot;&gt;bash? zsh?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;bash(Bourne-again shell) 은 오늘날 리눅스, 맥 OS X 등 다양한 OS 에서 기본으로 사용되는 셸 입니다. 1989 년에 발표되어 지금까지 쓰이고 있습니다.&lt;/li&gt;
  &lt;li&gt;zsh 는 bash 의 동생 격 정도(?) 라고 볼 수 있습니다. 1990년에 발표되어 사용되고 있습니다. bash 에 호환되며, 테마, 자동완성(명령줄 옵션까지 자동완성 해주는…) 등 강력한 기능 들이 특징입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zsh---&quot;&gt;zsh 는 뭐가 좋나요?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;자동완성 기능이 좋습니다. (명령줄 치다 옵션 같은것 기억 안날때, Tab 키 누르면 그 뒤에 나올 것들을 추천해 줍니다.)&lt;/li&gt;
  &lt;li&gt;명령어 치다가 잘못된 철자 자동으로 고쳐줍니다 (Tab 키 누르면 자동으로…)&lt;/li&gt;
  &lt;li&gt;oh my zsh 를 같이 사용하면 더 강력합니다.(보통 oh my zsh 는 zsh 사용시 같이 사용합니다)
    &lt;ul&gt;
      &lt;li&gt;oh my zsh 사용시 플러그인과 다양한 테마를 사용하실 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zsh----&quot;&gt;zsh 설치 및 초기설정 하기.&lt;/h2&gt;

&lt;p&gt;설명은 대충 끝났으니 설치해 봅시다. 보통의 경우 이미 설치된 경우가 많지만, 그렇치 않은 경우도 있습니다.
설치 안되어 있는 경우는, 터미널을 열고, 아래 명령줄을 실행하셔서 설치합니다.
리눅스의 경우 보통 배포판별로 패키지 저장소에 있는 zsh 를 패키지 관리자로 설치하시면 됩니다.&lt;/p&gt;

&lt;p&gt;Arch Linux&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo pacman -S zsh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Debian based distros(Debian, Ubuntu, Linux Mint, etc.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install zsh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fedora&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo yum install zsh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;설치 후, 기본 셸을 zsh 로 변경해 줍시다. 아래 명령줄을 실행하세요.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chsh -s /usr/local/bin/zsh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;변경 후, 터미널을 닫고 다시 새로 열어주세요. 아래 명령줄로 zsh 로 변경 되었는지 확인합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zsh --version&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;.zshrc 설정을 하려면 아래 명령줄을 이용하세요, 쉽게 설정 가능합니다.&lt;br /&gt;
oh my zsh 설치 시 .zshrc 파일 설정을 해 주기에 반드시 하실 필요는 없습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;zsh /usr/share/zsh/functions/Newuser/zsh-newuser-install -f&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;oh-my-zsh-&quot;&gt;oh my zsh 설치&lt;/h2&gt;

&lt;p&gt;별거 없습니다. 아래 명령줄 중 하나를 실행하세요.&lt;/p&gt;

&lt;p&gt;curl 을 이용하여 설치하기&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;wget 을 이용하여 설치하기&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - | sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section&quot;&gt;테마 적용하기&lt;/h2&gt;

&lt;p&gt;테마를 적용하려면, .zshrc 수정 후 저장합니다.ZSH_THEME 값을 원하시는 테마 이름으로 바꾸시면 됩니다. &lt;br /&gt;
&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Themes&quot;&gt;여기&lt;/a&gt;에서 어떤 테마가 있는지 살펴보세요.
전 agnoster 테마로 설정하겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;...
&lt;span class=&quot;nv&quot;&gt;ZSH_THEME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;agnoster&quot;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;agnoster 를 포함한 일부 테마는 특수한 폰트를 요구합니다 &lt;a href=&quot;https://github.com/powerline/fonts&quot;&gt;여기&lt;/a&gt; 에서 &lt;br /&gt;
Download ZIP 을 눌러 폰트를 받으신 후, 압축을 풀어 해당 폴더에서 다음과 같은 명령줄을 실행하여 폰트를 설치합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./install.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-1&quot;&gt;끝!&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blogimgs/zsh-is-awesome.png&quot; /&gt;&lt;br /&gt;
전 여기까지만 알려드릴거고 나머지 다른 커스터마이징은 oh my zsh 문서를 읽어보세요.&lt;br /&gt;
제가 사용중인 zsh 모습은 사진과 같습니다. 참고로 색상 팔레트는 솔라리스 사용중 입니다. gnome-terminal 의 경우 내장되어 있습니다.&lt;br /&gt;
터미널 폰트는 Ubuntu Mono derivative Powerline 사용 중입니다.&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki&quot;&gt;oh my zsh 위키&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Customization&quot;&gt;oh my zsh 커스터마이징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ohmyz.sh/&quot;&gt;oh my zsh 웹사이트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fendrich.se/blog/2012/09/28/no/&quot;&gt;No, Really. Use Zsh.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 17 May 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/05/17/using-zsh-and-oh-my-zsh-instead-of-bash-for-shell-customizing.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/05/17/using-zsh-and-oh-my-zsh-instead-of-bash-for-shell-customizing.html</guid>
        
        <category>update</category>
        
        <category>tips</category>
        
        <category>tutorial</category>
        
        <category>shell</category>
        
        <category>linux</category>
        
        <category>ubuntu</category>
        
        <category>archlinux</category>
        
        <category>fedora</category>
        
        <category>zsh</category>
        
        <category>oh_my_zsh</category>
        
        
      </item>
    
      <item>
        <title>아치리눅스에서 Brackets Live Preview 동작 안되는 현상 고치기</title>
        <description>&lt;p&gt;아치 리눅스에서 Brackets 를 사용하는 경우에, 라이브 프리뷰를 사용하고자 하면,
Brackets 이 크롬을 찾지 못해 라이브 프리뷰가 시작되지 못하는 문제가 있습니다.
아래와 같은 명령어로 심볼릭 링크를 걸어주면 문제를 해결할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ln -s /usr/bin/google-chrome-stable /usr/bin/google-chrome&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 18 Feb 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/02/18/fix-brackets-live-preview-problem-in-arch.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/02/18/fix-brackets-live-preview-problem-in-arch.html</guid>
        
        <category>web</category>
        
        <category>update</category>
        
        <category>tips</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>자기소개서 연습도구(ResumeUtil) 업데이트와 SSL 적용 안내</title>
        <description>&lt;p&gt;이번에 설 기념 해서(?) 작년 8월 쯤… 모의면접 준비하다 자기소개서 양식 파일이 *.hwp 여서 빡쳐서 즉석에서 만든
자기소개서 연습 도구 웹사이트 대폭 수정하게 되었습니다. 처음에 이름 딱히 없다가, 작년 말 되어서 IntroWorkout 이였다가,
이번에는 ResumeUtil 로 이름 정했습니다. 앞으로 이름은 이걸로 고정할 겁니다 ㅇㅅㅇ 이름 바뀐 만큼, UI도 바뀌고 새로운 첨삭 기능도 추가했습니다.
UI 는 Polymer 를 이용해 다시 만들었습니다. 첨삭 기능의 경우, 사용자 계정 페이지에서 첨삭받기를 켜시면. 본인 양식에 대한 첨삭을 받으실 수 있고.(그래봤자 댓글추가지만…)
다른 사람의 공개된 양식을 첨삭하시려면, “첨삭하기” 로 이동하신 후, 첨삭할 사람의 계정이름을 입력하시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/resumeutil0.png&quot; /&gt;
&lt;img src=&quot;/blogimgs/resumeutil1.png&quot; /&gt;
&lt;img src=&quot;/blogimgs/resumeutil2.png&quot; /&gt;
&lt;img src=&quot;/blogimgs/resumeutil3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 이번에 지금 이 github pages 에 제가 사용중인 도메인인 youngbin.tk 에 SSL 을 적용 했습니다.
CloudFlare 에서 무료로 준다길래 적용 했습니다 ㅎㅎㅎ. 일부 웹사이트에서는 외부 리소스(사진, 영상, 스타일시트, 스크립트)들이 http:// 로 오는 경우도 있어서,
보안이 덜 되었다고 나올수도 있습니다. 저에게 예기 해 주시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/ssl.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Feb 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/02/15/https-and-resumeutil-updates.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/02/15/https-and-resumeutil-updates.html</guid>
        
        <category>web</category>
        
        <category>app</category>
        
        <category>update</category>
        
        <category>university_enterance</category>
        
        <category>introworkout</category>
        
        <category>resumeutil</category>
        
        
      </item>
    
      <item>
        <title>안드로이드용 시온고 앱 업데이트 및 앱 이전 안내</title>
        <description>&lt;p&gt;안녕하세요. 오랜만에 앱 업데이트 소식을 들고 왔습니다. 요즘 앱 업데이트 가지고 따로 포스팅 안하는대. 이번에는 꽤 중요한 사항이라 포스팅 하게 되었습니다.&lt;/p&gt;

&lt;p&gt;이번 업데이트는 제가 관리하고 업데이트를 스토어를 통해 제공하는 프로젝트이자 앱인 시온고 앱의 마지막 업데이트 입니다. 저는 이제 고3… 이기 때문에, 관리를 못합니다.
이번 업데이트는 그렇게 큰건 없고, 자잘한 것들 수정해서 사용성을 좀 개선했습니다. 별 다른건 없습니다.&lt;/p&gt;

&lt;p&gt;이번 업데이트를 끝으로 저는 더이상 여러분들께 업데이트를 제공하지 않으며 관리도 하지 않게 되지만. 시온고등학교 앱은 계속 관리되고 업데이트 될 예정입니다.
운이 좋게도 박웅규 선생님(pwk824@naver.com) 께 관리를 부탁드렸는대 흔쾌히 부탁을 받아주셨습니다. 그래서 박웅규 선생님께서 앞으로 관리해 주실 겁니다.
다만, 앱이 저의 계정에서 시온고등학교 계정으로 옮겨질 예정입니다. 제가 아닌 다른 분께서 관리 하시는대, 언제까지나 저의 계정으로 배포할 순 없다고 생각하여 옮기기로 하였습니다.
앱이 시온고 계정으로 옮겨지면, 그 때 마지막으로 저의 계정에 있는 시온고 앱 업데이트를 통해 시온고 계정에서 배포되는 시온고 앱을 사용하도록 할 예정이며,
별도로 이렇게 포스팅으로 알려드릴 에정입니다.(보는 사람이 있을지 모르겠지만…)&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Feb 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/02/09/zionhs-update-and-deprecation.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/02/09/zionhs-update-and-deprecation.html</guid>
        
        <category>android</category>
        
        <category>app</category>
        
        <category>update</category>
        
        <category>zion_high_school</category>
        
        
      </item>
    
      <item>
        <title>올해(2014학년도) 교지에 실린 (편집된)내 중국 교환학생 후기에 대한 개인적인 뒷북..</title>
        <description>&lt;p&gt;음… 뒷북이긴 한대 이번에 학교 교지에 내 중국 교환학생 후기가 실렸는대… 운좋게 내가 써서 냈던 후기 덕에 상 받고 교지에 실려서 정말 고맙긴 한대… 갠적으로 편집이 좀 별로다… 원래 10쪽 짜리였는대… 너무 길어서 4쪽으로 줄인건 그렇다 치지만… 구글, 이메일, 카카오톡 이런거 그냥 그대로 “구글”, “이메일”, “카카오톡” 이렇게 쓰지 “구–글”, “이–메일”, “카카오 톡” 로 편집된건… 쩝… 그리고 교지에 싣기에 분량 많아서 도서관장님께서 분량 좀 줄여서 보내달라 하시길래 줄여서 보내드렸는대… 거기에서도 짤린게 꽤 되는듯… 잘 짤린것도 있지만, 그렇치 않은 부분도 있다.&lt;/p&gt;

&lt;p&gt;예를 들면 아래와 같은 내용들이 짤리거나… 짤리지 않았어도 그 안에서 내가 보기에 중요한 부분이 부분적으로 짤렸다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;완전히 짤림&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;일부 1학년 학생들은 농구시합에 참여하지 않았는대. 그러자 교장선생님꼐서 오셔서 “너희들은 왜 농구 안하니? 1학년 체육선생님 누구야!” 라고 물어보시자 앉아있던 친구들이 다같이 “이찬* 성생님이요” 라고 했다. 그러자 교장선생님이 “이찬* 선생님 아주 혼줄을 내줘야지!” 라고 하셨다.&lt;/li&gt;
  &lt;li&gt;먹고 있는대 직원이 이번에도 일정 시간 간격으로 꼬치를 쌓고 또 쌓아줬다(?) 그러다 보니 먹기 시작한지 얼마되지 않아 꼬치가 수북히 쌓였다. 쌓인 걸 보고 저걸 어떻게 언제 다 먹나 라는 생각을 했다.(물론 다 먹지 못했다. 다 먹으면 정말 배터진다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;부분적으로 짤림&lt;/h2&gt;

&lt;p&gt;(원본)
어쩌다 보니 장기자랑 끝에는 하얼빈 12중학교 교장선생님 노래와, 우리학교 교장선생님 춤추는 것도 보게 되었다(…).
(교지)
마지막 순서로 하얼빈 12중학교 교장선생님 노래와, 우리학교 교장선생님 춤도 감상할 수 있었다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;자를 부분을 적절히 자르거나 적절히 고쳐준 건 고마운대… 편집 하신 분이 불필요한 내용이라고 생각 하신건진 모르겠으나…(?) 내가 볼때 좀 재미난 내용이 편집되어 사라진 점이 아쉽고
진짜 저 “구-글”, “이-메일” 이것 만큼은 정말 별로다… 다음부턴 그냥 “구글”, “이메일” 이렇게 표기했으면…&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/02/02/my-thought-about-my-review-post-about-china-program-that-was-edited-by-school-magazine-depart.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/02/02/my-thought-about-my-review-post-about-china-program-that-was-edited-by-school-magazine-depart.html</guid>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>시온고 안드로이드 스터디 노트 - 4.Lifecycle and Databases</title>
        <description>&lt;p&gt;Lesson 4 ~ 6 에 대한 정리는 뒤늦게 하게 되었군요. 이 부분은 어려운 내용이 많다보니 Udacity 코스의 내용과 저희 스터디에서 다룬 내용하고 차이가 많습니다.
저는 저희 스터디에서 다룬 내용들만을 다루고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;lesson-4-&quot;&gt;스터디에서 다룬 Lesson 4 내용&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;각종 앱 컴포넌트들의 생명주기(Lifecycle)&lt;/li&gt;
  &lt;li&gt;Realm 데이터베이스&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;activity--lifecycle&quot;&gt;Activity 의 생명주기(Lifecycle)&lt;/h2&gt;
&lt;p&gt;말 그대로 Activity 의 생명주기에 관한 내용입니다. Activity 가 시작이 되어 종료 될 때 까지 어떤 일이 벌어지는지에 관한 내용입니다.
Activity 가 실행되는 동안, 여러 Lifecycle 메서드들이 호출 되는대, 어떤 상황에서 어떤 메서드가 호출되는지 알아봅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blogimgs/basic-lifecycle.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 사진은 Activity 의 생명주기를 그림으로 나타낸 것 입니다. 그림에는 Activity 의 상태와, 상태에 따라 호출되는 메서드들이 나와 있습니다.&lt;/p&gt;

&lt;p&gt;앱 아이콘 클릭으로 Activity 가 켜지거나, startActivity(); 에 의해 Activity 가 시작되면, onCreate() 가 호출됩니다. 그리고 바로 onStart() 가 시작되어 사용자에게 화면이 보이게 됩니다. 다음으로 onResume() 이 호출되어 사용자와 Activity가 상호작용을 할 수 있게 됩니다.(예를 들면 버튼 클릭) 그러다가 Activity 위에 조그마한 다이얼로그나 팝업 같은 것이 나와 화면에 계속 Activity 가 보이긴 하지만, 잠시 상호작용을 멈출 때 onPause() 가 호출됩니다. 그리고 다시 돌아오면 onResume() 이 호출되어 상호작용기 계속 됩니다. 다른 앱 또는 다른 Activity 로 전환하여, 보고 있던 Activity 가 종료되지 않았지만 화면에 보이지 않아 백그라운드 상태가 될 때, onStop() 가 호출 됩니다. 그러다가 다시 돌아오면, onRestart() 이 호출되어 사용자와의 상호작용이 계속 되고. 사용자가 뒤로가기 버튼 등으로 Activity 를 종료 시키면, onDestory() 가 호출되며 Activity 가 종료 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;oncreate&quot;&gt;onCreate()&lt;/h3&gt;
&lt;p&gt;Activity 가 새로 시작 될 때(앱 아이콘을 눌러서 시작되든, startActivity() 로 시작되든) 호출됩니다.
주로 onCreate() 메서드 안에는 주로 레이아웃을 로드하며 화면에 표시하는 코드와 클릭처리 등의 UI 처리와 관련된 코드들이 많이 들어갑니다.
우리가 작성하는 대부분의 코드가 이 메서드 안에 작성 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;onstart&quot;&gt;onStart()&lt;/h3&gt;
&lt;p&gt;필자는 거의 써본적이 없는 메서드 입니다. onCreate() 또는 onRestart() 가 호출되고 바로 다음으로 호출됩니다.&lt;/p&gt;

&lt;h3 id=&quot;onresume&quot;&gt;onResume()&lt;/h3&gt;
&lt;p&gt;onStart() 바로 다음 또는 Paused 상태 (잠시 사용자와의 상호작용이 중지된 상태) 에서 돌아올 떄 호출 됩니다.
Activity 위에 다이얼로그 창이 나타났다가 사라져서 사용자와의 상호작용을 계속 하는 때를 예로 들 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;onpause&quot;&gt;onPause()&lt;/h3&gt;
&lt;p&gt;Activity 가 잠시 백그라운드 상태고 갈 때나, Activity 위에 다이얼로그 같은 것이 나타나서 Paused 상태로 갈 때 호출됩니다.
보통 이 메서드 안에는 화면 상태를 저장하는 코드(이메일 앱을 예로 들면, 메일 작성하다가 나와서 작성중인 것이 임시 저장하는 경우)라던가,
각종 센서 사용을 멈추는 코드들이 들어갑니다. 백그라운드로 가서 Paused 된 Activity 는 곧 onStop() 이 호출 되면서, 
Stop 상태(또는 숨겨진 상태) 가 됩니다.(완전히 꺼진 상태는 아님)&lt;/p&gt;

&lt;h3 id=&quot;onstop&quot;&gt;onStop()&lt;/h3&gt;
&lt;p&gt;Activity 가 화면상에 보이지 않는 백그라운드 상태가 될 때 호출됩니다. 보통 대부분의 리소스 사용을 중지하는 코드를 이 메서드 안에 넣습니다.&lt;/p&gt;

&lt;h3 id=&quot;ondestory&quot;&gt;onDestory()&lt;/h3&gt;
&lt;p&gt;Activity 가 완전히 종료 될 때 호출됩니다. 우리가 앱을 사용하다가 종료 하기 위해 뒤로가기 버튼을 누르면, 일부 앱은 “종료 하시겠습니까” 같은 다이얼로그가 나타나면서,
종료를 확인하기도 하고. 뒤로가가 한번 더 누르면 앱이 종료된다는 Toast 메시지가 나타나기도 하는대. 이런 것들이 보통 onDestory() 를 사용한 것 들입니다.&lt;/p&gt;

&lt;h2 id=&quot;realm-&quot;&gt;Realm 데이터베이스&lt;/h2&gt;
&lt;p&gt;안드로이드에는 SQLite 데이터 베이스를 이용해 데이터를 저장하고 불러올 수 있습니다만… 상당히 복잡 하더군요… 그리고 ContentProvider… Ah…
그래서 저희는 Realm 데이터 베이스를 다루는 것으로 대신 했습니다.&lt;/p&gt;

&lt;p&gt;Realm 을 사용하려면 일단, build.gradle 의 dependencies 에 의존성으로 Realm 을 추가해 줘야 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;include:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;*.jar&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;libs&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.android.support:appcompat-v7:21.0.3&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.squareup.okhttp:okhttp:2.2.0&#39;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;io.realm:realm-android:0.78.0&#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이거 한줄만 추가하면 됩니다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section&quot;&gt;데이터 모델 정의하기&lt;/h3&gt;
&lt;p&gt;클래스 파일을 하나 새로 생성하세요. 데이터 모델을 정의하는 클래스로 사용할 것입니다.
데이터 모델을 정의하는 클래스는 RealmObject 를 상속 받고, 클래스에는 데이터 한 열 마다 어떤 데이터가 들어갈지 변수로 정의하고.
getter 와 setter 메서드를 작성해 줍니다. 아래는 스터디를 통해 작성된 것입니다. 하루치 일기예보 데이터 모델을 정의한 것입니다.
한 열에 날씨 상태, 최대기온, 최저기온을 저장하도록 정의되어 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeatherDataModel&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;쓰기 작업&lt;/h3&gt;
&lt;p&gt;모든 쓰기(추가, 삭제, 수정) 작업은 아래와 같이 쓰기 트랜젝션 안에서 이루어 집니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Realm 인스턴스 얻기&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//여기에서 쓰기 작업이 이뤄집니다.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;데이터 캐싱을 관리할 클래스 작성하기.&lt;/h3&gt;

&lt;p&gt;클래스를 새로 하나 더 만듭시다. 데이터를 관리해 주는 클래스로 사용할 것입니다.
생성자를 작성하고, 생성자에서 Realm 인스턴스를 얻어줍시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeatherDataManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WeatherDataManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherDataManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Realm 인스턴스 얻기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;우선, 캐시를 저장하는 메서드를 새로 작성합시다. 캐시를 저장하는 메서드에는 기존 데이터를 모두 지우고 새로 얻은 데이터를 저장하는 코드를 넣을 겁니다.
캐시를 저장하는 메서드를 작성하기 앞서, 데이터를 모두 쿼리하여 불러오는 메서드를 작성합시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeatherDataManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WeatherDataManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherDataManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Realm 인스턴스 얻기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
     &lt;span class=&quot;c1&quot;&gt;//모든 캐시 데이터 로드하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//쿼리하기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//쿼리한 것에서 모두 다 로드&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제 캐시를 저장하는 메서드를 작업합니다. 우선, 기존 데이터를 비워줍시다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeatherDataManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WeatherDataManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherDataManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Realm 인스턴스 얻기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//이전 캐시 데이터를 비우고 새로 캐시를 저장하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dropOldAndSaveNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Caching Data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//모든 데이터 쿼리하여 불러오기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//데이터 처리 시작&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//모두 지우기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
     &lt;span class=&quot;c1&quot;&gt;//모든 캐시 데이터 로드하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고 반복문을 이용해 저장해 줍니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeatherDataManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WeatherDataManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherDataManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Realm 인스턴스 얻기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//이전 캐시 데이터를 비우고 새로 캐시를 저장하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dropOldAndSaveNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Caching Data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//모든 데이터 쿼리하여 불러오기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//데이터 처리 시작&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//모두 지우기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//새로 데이터 객체 생성&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//각 필드마다 데이터 설정&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done Caching&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
     &lt;span class=&quot;c1&quot;&gt;//모든 캐시 데이터 로드하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;저장된 데이터를 로드하는 4가지 메서드 또한 작성해 줍니다.
3개의 메서드는 각각 상태, 최대, 최저 값을 따로 로드하여 배열로 반환하고.
나머지 하나는 3가지 값을 한 항목으로 합쳐서 배열로 반환해 줍니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WeatherDataManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WeatherDataManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherDataManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Realm 인스턴스 얻기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//이전 캐시 데이터를 비우고 새로 캐시를 저장하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dropOldAndSaveNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//날씨 상태 데이터 로드하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadStateArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Loading From Cache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//캐시된 데이터 모두 로드&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//최대기온 데이터 로드하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadMaxArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Loading From Cache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//캐시된 데이터 모두 로드&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//최저기온 데이터 로드하는 함수 &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadMinArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Loading From Cache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//캐시된 데이터 모두 로드 &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//화면에 표시할 데이터 로드&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadDataFromRealm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Loading From Cache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; MAX=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; MIN=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Done Loading From Cache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    
     &lt;span class=&quot;c1&quot;&gt;//모든 캐시 데이터 로드하는 함수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherDataModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-3&quot;&gt;데이터 캐싱 해보기&lt;/h3&gt;

&lt;p&gt;우리가 작성한 데이터 관리 클래스에서 메서드를 호출해 캐싱 해 봅시다. 아래는 예시 코드입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//인스턴스 얻기&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WeatherDataManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherDataManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//캐싱&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dropOldAndSaveNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//캐시 로드&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadStateArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadMaxArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadMinArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-4&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://realm.io/kr/docs/java/0.78.0/&quot;&gt;Realm Java Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.android.com/training/basics/activity-lifecycle/index.html&quot;&gt;Managing the Activity Lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/02/02/android-study-lesson-four-note.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/02/02/android-study-lesson-four-note.html</guid>
        
        <category>develop</category>
        
        <category>development</category>
        
        <category>android</category>
        
        <category>app</category>
        
        <category>study</category>
        
        <category>note</category>
        
        
      </item>
    
      <item>
        <title>Android Study Lesson Five Note</title>
        <description>
</description>
        <pubDate>Mon, 02 Feb 2015 00:00:00 +0900</pubDate>
        <link>http://sukso96100.github.io//blog/2015/02/02/android-study-lesson-five-note.html</link>
        <guid isPermaLink="true">http://sukso96100.github.io//blog/2015/02/02/android-study-lesson-five-note.html</guid>
        
        
      </item>
    
  </channel>
</rss>
